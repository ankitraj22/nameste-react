Q) What is Emmet?
-> Emmet basically generates some code for you. Visual studio uses Emmet.

Q) What is cross origin in script tag?
-> CORS stands for Cross-Origin Resource Sharing, and is a mechanism that 
allows resources on a web page to be requested from another domain outside 
their own domain.

Q) What is a react element?
-> React element is an object and it becomes an html that the browser understands.

React.createElement(...) -> it creates an object for me.

While it is rendering on the Dom, it converts itself into an HTML and 
Puts it up into the Dom.

Q) React.createElement()?
-> it takes 3 argument.
1. Name of the tag
2. Object which will go as an attributes
3. Children of the tag

const heading = React.createElement("h1", { id: "heading" }, "Namaste React üöÄ");

Q) Does the order of execution matters?
-> yes it matters.

Q) React library or framework?
-> We call react as a library üìö & not framework because it can be applied to 
a small portion of the existing code also.

React is just a javascript library.

Q) What is npm?
-> npm doesn't stand for node package manager. It doesn't have any full form.
npm is a package manager from java script. It manages package.

Command npm init

Q) What is a pacrcel?
-> It is a bundler.
A bundler is a development tool that combines many JavaScript code files 
into a single one that is production-ready loadable in the browser

It is installed with this command npm install -D parcel

Where -D tells us that we need it as dev dependency and not a normal dependency.

Q) What all things does parcel does for you?
Read at parceljs.org

1. It created a dev build for you.
2. It creates a local server for you, it hosts your app to the server.
3. It does HMR = Hot Module replacement.
4. It uses a File Watching Algorithm for doing the HMR.
5. Caching for faster builds.
6. Image Optimization.
7. Magnification of files.
8. Bundling
9. Compress the file to smaller size, it will remove all the white spaces from the code, it will minify and pack all the JavaScript files and ship it on to production.
10. Consistent Hashing
11. Code Splitting 
12. Differential Bundling -> Support for older browsers.
13. Diagnostic 
14. Error Handling -> Gives better error suggestions 
15. Supports HTTPs -> npc parcel index.html --https -> it will load in https mode
16. Tree Shaking - remove unused code.
17. Creates a different dev and production bundles. 
For normal dev build we do npx parcel index.html -> after the build is created it is hosted to localhost:1234 and then puts it up to the dist folder.
For production build we do npx parcel build index.html


Q) Types of dependencies defined in npm.
-> A dependency is a library that a project needs to function effectively.

There are actually five different dependency types defined by npm:
1. normal dependencies. -> normal dependencies are packages that are required for an application to run in both development and production environments. 

2. dev dependencies. -> devDependencies are the packages a developer needs during development.

3. peer dependencies. -> Dependencies that your app relies on but expects another package to provide.

4. optional dependencies. -> Dependencies that are not critical for the execution of the library 

5. bundled dependencies. -> Dependencies that are packaged directly with your module 

Q) How to install dependencies: 
-> When you run npm install, npm looks at the dependencies object in your package.json file and automatically installs all the dependencies listed there

Q) Why are dependencies important?
-> Dependencies are required for your project to function as intended when deployed. 

Q) What is package.json?
https://www.geeksforgeeks.org/difference-between-package-json-and-package-lock-json-files/

You can initialize the node project by running the below command:

npm init


-> It is the main configuration file in a Node project which describes the project metadata, dependencies, scripts and other required 
configurations. 

It shows the packages and their versions being used in the project. It also categorises packages based on usage like dependencies for 
production, devDependencies for development environment.

Q) What is package.lock.json?
https://www.geeksforgeeks.org/difference-between-package-json-and-package-lock-json-files/

the package.lock file on the other hand provides the snapshot of all the dependencies and sub-dependencies with exact versions. 
It locks the versions for the consistent project setup across different environments.


#### package-lock.json is crucial for locking dependencies to specific versions, ensuring consistent installations across different environments. 
Without it, variations in installed versions may occur. This file guarantees reproducibility by specifying exact versions, preventing discrepancies. 
Including both package.json and package-lock.json in source control ensures that collaborators install the exact dependencies, maintaining uniformity.

Q) Commands

npm init -> 

Initializes a new Node.js project by creating a package.json file.
This file stores metadata about the project, dependencies, scripts, etc.

You can use:
npm init ‚Üí Interactive mode (asks for project details).
npm init -y ‚Üí Skips questions and uses default values.


npm install (or npm i) ->

Installs all dependencies listed in package.json.

You can also use it to install specific packages:
npm install <package-name> ‚Üí Installs a package locally.
npm install -g <package-name> ‚Üí Installs globally.
npm install <package-name> --save-dev ‚Üí Installs as a dev dependency.


npm start

Runs the start script defined in package.json.


Q) Caret and tilde in package.json?
In package.json, the caret (^) and tilde (~) are used for specifying dependency versions, but they behave differently when updating packages.

1. Caret (^)

"dependencies": {
  "express": "^4.17.1"
}


What it means:
Allows updates for minor and patch versions but not major versions.
Example: ^4.17.1 will allow updates up to 4.x.x, but not 5.0.0.
This follows semantic versioning:
Major (4.x.x) ‚Äì Breaking changes
Minor (x.17.x) ‚Äì New features (backward-compatible)
Patch (x.x.1) ‚Äì Bug fixes (backward-compatible)


2. Tilde (~)

"dependencies": {
  "express": "~4.17.1"
}


What it means:
Allows updates for patch versions only, but not minor or major.
Example: ~4.17.1 will allow updates up to 4.17.x, but not 4.18.0 or 5.0.0.

Q) What is node modules?
-> node_modules is a folder in a Node.js project that stores all installed dependencies (packages) required for the project. 
It is created when you run: npm install

How it Works?
1. When you install a package using npm install <package-name>, npm downloads it from the npm registry and saves it inside the node_modules folder.
2. The dependencies listed in package.json are installed in this folder.
3. It also contains sub-dependencies (dependencies of the installed packages).

Why is node_modules Important?
It contains the actual code of the installed libraries, allowing your project to function properly.
It helps manage dependencies without requiring every user to download them manually.

Do We Need to Push node_modules to Git?
‚ùå No! It is a large folder and can be regenerated anytime using npm install.
‚úîÔ∏è Instead, we only keep package.json and package-lock.json in version control.

How to Remove node_modules?
If you want to free up space or reset dependencies, you can delete it using:
rm -rf node_modules

Then, reinstall dependencies using:
npm install


Q) What is npx?
npx (Node Package Execute) is a command that runs Node.js packages without installing them globally. It comes with npm (Node Package Manager) version 5.2+ and later.

It is used to execute a package.

Q) Why use npx?
Run packages without installing them globally

Q) What does npx parcel index.html mean?
parcel is a fast web application bundler.
index.html is the entry point of the web application.

npx parcel index.html

Here index.html is the source 
So the parcel goes to the source index.html and build the development build for our app and it hosts that development build to http://localhost:1234

Starts a development server using Parcel.
Bundles your project and serves it at a local URL (e.g., http://localhost:1234).
Automatically reloads when you make changes.

Q) When to use npx parcel index.html command?
If you want to test a web project locally with Parcel.
If you don‚Äôt want to install Parcel globally.


Q) Way to use react in our app?

One way is using CDN which is not a good way, as it is a costly affair as it does a network call.

<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

It is for react 18, if a new versions comes up we will have to change it.

The other way to use react is by installing it as a package in our app.

The command to install react is npm install react  or  npm i react

The command to install react dom is npm install react-dom or npm i react-dom




############ EPISODE 3 ######################

Q) What does npm run start or npm start does?
-> It runs the start script which is to run the application npx parcel index.html
We write this script in package.json

"scripts": {
    "start":"parcel index.html",
    "build":"parcel build index.html",
    "test": "jest"
  }

Q) What does npm run build does?
-> It runs the build script which is to run the application npx parcel build index.html
We write this script in package.json

"scripts": {
    "start":"parcel index.html",
    "build":"parcel build index.html",
    "test": "jest"
  }


Q) What is a JSX?
JSX is a JavaScript syntax which is easier to create a react element.
### JSX is not an HTML inside java script.
JSX is a HTML like syntax.

Q) What is a java script?
A javascript is a code that a JS engine can understand.
JS engine understands ECMAScript 

const heading = React.createElement("h1", { id: "heading" }, "Namaste React üöÄ");
JS engine doesn't understand this, parcel is doing the job behind the scene, it is done by the package Babel
Babel is present in the node_module folder and is installed by parcel.
It transpile the code  before sending it to the JS engine and the JS engine receives the 
Code that the browser can understand.

JXS code is converted to React.createElement() behind the scene and this react element (which is a JS object) is rendered on to Dom as an HTML Element.
You can check by coding at babeljs.io

Q) What Is Transpiling? 
Transpilation, a portmanteau of transformation and compilation, is the process of converting source code from one high-level programming language to another.

Q) What are react components?
1. Class based component - OLD way of writing code - It uses JavaScript classes to to create a component
2. Functional Component - New way of writing code - It uses JavaScript function to to create a component

Q) Why does React requires that the first letter of components be capitalized?
JSX will use this capitalization to tell the difference between an HTML tag and a component instance. 
If the first letter of a name is capitalized, then JSX knows it's a component instance; if not, then it's an HTML element.

Q) React Functional Component?
It is a normal JavaScript function which returns a piece of JSX element.

Q) What is a component composition?
"Component composition" refers to the practice of building complex user interfaces by combining smaller, 
reusable components together, essentially acting like building blocks to create a larger, more intricate 
structure within a software application, promoting modularity, maintainability, and reusability of code. 


Q) How does JSX prevent injection attacks - Cross site scripting?
JSX (JavaScript XML) in React helps prevent injection attacks by automatically escaping any values embedded within JSX elements. 
This means that React converts all embedded values to strings before rendering them, effectively neutralizing potentially malicious code.

In React, "escaping" refers to the process of automatically converting special characters within a string to their HTML entity equivalents 
before rendering them on the page, essentially preventing potential security vulnerabilities like Cross-Site Scripting (XSS) by ensuring that 
any user-provided data is displayed as plain text rather than interpreted as HTML code; React does this by default for any values embedded in 
JSX, effectively "escaping" potentially harmful characters. 


Q) What is react props?
Props - property is something that we can pass to the components.
It is used to dynamically pass data to the component.
Props are a normal argument to the function.


Q) What is a config driven UI?
A Config-Driven UI is a user interface (UI) that is dynamically generated based on configuration files (like JSON or YAML) instead of being hardcoded. 
This makes the UI more flexible, reusable, and easy to update without changing the code.

Benefits of Config-Driven UI
‚úÖ Flexibility ‚Äì UI can be changed by updating the config file, without modifying the code.
‚úÖ Reusability ‚Äì The same UI logic can generate different forms or screens based on different configs.
‚úÖ Faster Development ‚Äì No need to manually create new UI components for each variation.
‚úÖ Easy Customization ‚Äì Different UI versions can be maintained just by modifying configurations.

Q) Why do we need to give key while looping?
-> whenever we do the looping we should provide key.
If you don't provide the key and a new element is added then react will render all of them, even the already present one.
It will hit the performance.
But if you have given the key already, it would only render the new one, because now react identifies the element and knows which is old and which is new.
If you don't add key then react will throw a warning.

{restList.map(
(restaurant) => (<Restaurant key={restaurant.data.id} resData={restaurant}/>)
)}

### React says you should not use index as a key

{restList.map(
(restaurant, index) => (<Restaurant key={index} resData={restaurant}/>)
)}

React won't complain about it but the order of the item might change.
If the unique id is not present then you can use index as a key but it is not recommended.


#################### Episode 5 ####################

Q) default export vs named export?
-> You can do only one default export but multiple named exports.

Default Export/Import
export default Component;
import Component from "path";

Named Export/Import
export const Component;
import {Component} from "path";

## We can use both named export and default import together.

Q) What is React hooks?
React Hooks are tools that help you manage state, add features, and share logic in React applications. 
They are used in function components instead of class components. 

Q) How do React Hooks work?
useState: Allows you to use local state within a function component. 
useEffect: Performs side effects in functional components, such as running a function after updating the DOM. 
useRef: Returns a mutable ref object that persists for the lifetime of the component. 
useReducer: An alternative to useState for complex state management. 
useContext: Allows functional components to access the React Context API and share data across the component tree. 


const [name of the variable] = useState([]);

If you want to modify the variable you need to give a function as 2nd parameter in the array.

const [name of the variable, setVariable] = useState([]);
You can give any name you want in place of setVariable.

Whenever a state variable updates, react re-render the component.

It does it using Reconciliation algorithm(React Fiber -> it came in React 16)

React creates a virtual domain and Diff algorithm finds the difference between the old and new virtual dom.
It calculates the difference and then actually update the Dom.
A virtual Dom is representation of the actual Dom.

As soon as you call the setter function, which is setVariable in our case, it will find the diff and update the dom.




#################### Episode 6 #####################

Q) What is Optional Chaining (?.) in JavaScript?
Optional chaining (?.) is a feature in JavaScript that allows you to safely access nested object properties without causing an error if a property is null or undefined.

Normally, accessing a deeply nested property in JavaScript without checking each level can cause an error:

let user = {};  
console.log(user.profile.name);  // ‚ùå Error: Cannot read properties of undefined


With optional chaining (?.), JavaScript stops checking further if a property is null or undefined and returns undefined instead of throwing an error.

console.log(user?.profile?.name);  // ‚úÖ undefined (No error)


Q) How to Use Optional Chaining?

1. Accessing Object Properties

let user = { profile: { name: "Alice" } };

console.log(user?.profile?.name);  // ‚úÖ "Alice"
console.log(user?.address?.city);  // ‚úÖ undefined (No error)

2. Accessing Array Elements

let users = [{ name: "John" }, { name: "Doe" }];

console.log(users?.[0]?.name);  // ‚úÖ "John"
console.log(users?.[5]?.name);  // ‚úÖ undefined (No error)

3. Calling Functions
If a function may not exist, ?.() prevents an error.

let user = { greet: () => "Hello!" };

console.log(user.greet?.());  // ‚úÖ "Hello!"
console.log(user.sayGoodbye?.());  // ‚úÖ undefined (No error)

4. Accessing Properties in Maps & DOM Elements

let map = new Map();
map.set("key1", "value1");

console.log(map.get?.("key1"));  // ‚úÖ "value1"
console.log(document.querySelector(".non-existent")?.innerText);  // ‚úÖ undefined

Benefits of Optional Chaining
‚úÖ Prevents errors ‚Äì No need for if checks before accessing nested properties.
‚úÖ Simplifies code ‚Äì Reduces unnecessary if-else or && conditions.
‚úÖ Safer access ‚Äì Works with objects, arrays, functions, and DOM elements.


Q) When Not to use Optional Chaining?
If you expect a property to always exist, avoid ?. (because it hides errors).
If an object must have a valid value, handle it with proper checks instead.


Q) what is a shimmer ui?
Shimmer UI is a user interface (UI) that uses a gradient animation to mimic the appearance of content that will load. It's often used to indicate that a page or app is loading. 


Q) useState variable is const so how we are able to change it?
When you call the set method of the useState const variable then react re-render the whole component and it creates a new variable with the new value. 
That's why we are able to change it.
In re-rendring the diff algorithm works and checks what have changed and changed component will be refreshed.






